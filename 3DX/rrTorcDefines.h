#pragma once
#include <stdint.h>
//stencil options

#define TORC_STATE_STENCIL_FRONTFACE_MASK			0x0000ffff
#define TORC_STATE_STENCIL_BACKFACE_MASK			0xffff0000

#define TORC_STATE_STENCIL_FAIL_OP_KEEP				UINT32_C(0x00000001) 
#define TORC_STATE_STENCIL_FAIL_OP_ZERO				UINT32_C(0x00000002) 
#define TORC_STATE_STENCIL_FAIL_OP_REPLACE			UINT32_C(0x00000003) 
#define TORC_STATE_STENCIL_FAIL_OP_INCR_SAT			UINT32_C(0x00000004) 
#define TORC_STATE_STENCIL_FAIL_OP_DECR_SAT			UINT32_C(0x00000005) 
#define TORC_STATE_STENCIL_FAIL_OP_INVERT			UINT32_C(0x00000006) 
#define TORC_STATE_STENCIL_FAIL_OP_INCR				UINT32_C(0x00000007) 
#define TORC_STATE_STENCIL_FAIL_OP_DECR				UINT32_C(0x00000008) 
#define TORC_STATE_STENCIL_FAIL_OP_MASK				0x0000000f

#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_KEEP		UINT32_C(0x00000010) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_ZERO		UINT32_C(0x00000020) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_REPLACE	UINT32_C(0x00000030) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_INCR_SAT	UINT32_C(0x00000040) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_DECR_SAT	UINT32_C(0x00000050) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_INVERT		UINT32_C(0x00000060) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_INCR		UINT32_C(0x00000070) 
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_DECR		UINT32_C(0x00000080)
#define TORC_STATE_STENCIL_DEPTH_FAIL_OP_MASK		0x000000f0

#define TORC_STATE_STENCIL_PASS_OP_KEEP				UINT32_C(0x00000100) 
#define TORC_STATE_STENCIL_PASS_OP_ZERO				UINT32_C(0x00000200) 
#define TORC_STATE_STENCIL_PASS_OP_REPLACE			UINT32_C(0x00000300) 
#define TORC_STATE_STENCIL_PASS_OP_INCR_SAT			UINT32_C(0x00000400) 
#define TORC_STATE_STENCIL_PASS_OP_DECR_SAT			UINT32_C(0x00000500) 
#define TORC_STATE_STENCIL_PASS_OP_INVERT			UINT32_C(0x00000600) 
#define TORC_STATE_STENCIL_PASS_OP_INCR				UINT32_C(0x00000700) 
#define TORC_STATE_STENCIL_PASS_OP_DECR				UINT32_C(0x00000800)
#define TORC_STATE_STENCIL_PASS_OP_MASK				0x00000f00


#define TORC_STATE_STENCIL_FUNC_COMPARISON_NEVER			UINT32_C(0x00001000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_LESS				UINT32_C(0x00002000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_EQUAL			UINT32_C(0x00003000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_LESS_EQUAL		UINT32_C(0x00004000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_GREATER			UINT32_C(0x00005000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_NOT_EQUAL		UINT32_C(0x00006000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_GREATER_EQUAL	UINT32_C(0x00007000) 
#define TORC_STATE_STENCIL_FUNC_COMPARISON_ALWAYS			UINT32_C(0x00008000)
#define TORC_STATE_STENCIL_FUNC_MASK						0x0000f000	
				

#define TORC_STATE_BLEND_ZERO						UINT64_C(0x0000000000000000) 
#define TORC_STATE_BLEND_ONE						UINT64_C(0x0000000000000001)	
#define TORC_STATE_BLEND_SRC_COLOR 					UINT64_C(0x0000000000000002)
#define TORC_STATE_BLEND_INV_SRC_COLOR 				UINT64_C(0x0000000000000003)
#define TORC_STATE_BLEND_SRC_ALPHA 					UINT64_C(0x0000000000000004)
#define TORC_STATE_BLEND_INV_SRC_ALPHA 				UINT64_C(0x0000000000000005)
#define TORC_STATE_BLEND_DEST_ALPHA 				UINT64_C(0x0000000000000006)
#define TORC_STATE_BLEND_INV_DEST_ALPHA 			UINT64_C(0x0000000000000007)
#define TORC_STATE_BLEND_DEST_COLOR 				UINT64_C(0x0000000000000008)
#define TORC_STATE_BLEND_INV_DEST_COLOR 			UINT64_C(0x0000000000000009)
#define TORC_STATE_BLEND_SRC_ALPHA_SAT 				UINT64_C(0x000000000000000A)
#define TORC_STATE_BLEND_BLEND_FACTOR 				UINT64_C(0x000000000000000B)
#define TORC_STATE_BLEND_INV_BLEND_FACTOR 			UINT64_C(0x000000000000000C)
#define TORC_STATE_BLEND_SRC1_COLOR 				UINT64_C(0x000000000000000D)
#define TORC_STATE_BLEND_INV_SRC1_COLOR 			UINT64_C(0x000000000000000E)
#define TORC_STATE_BLEND_SRC1_ALPHA 				UINT64_C(0x000000000000000F)
#define TORC_STATE_BLEND_INV_SRC1_ALPHA 			UINT64_C(0x0000000000000010)

#define TORC_STATE_BLEND_SRC_MASK					UINT64_C(0x000000000000001F)
#define TORC_STATE_BLEND_DST_MASK					UINT64_C(0x00000000000003E0)
#define TORC_STATE_BLEND_OP_MASK					UINT64_C(0x0000000000001C00)
#define TORC_STATE_BLEND_SRCA_MASK					UINT64_C(0x000000000003E000)
#define TORC_STATE_BLEND_DSTA_MASK					UINT64_C(0x00000000007C0000)
#define TORC_STATE_BLEND_OP_ALPHA_MASK				UINT64_C(0x0000000003800000)


// blend operations
#define TORC_BLEND_OP_ADD							UINT64_C(0x0000000000000001) 
#define TORC_BLEND_OP_SUBTRACT						UINT64_C(0x0000000000000002)
#define TORC_BLEND_OP_REV_SUBTRACT					UINT64_C(0x0000000000000003)
#define TORC_BLEND_OP_MIN							UINT64_C(0x0000000000000004)
#define TORC_BLEND_OP_MAX							UINT64_C(0x0000000000000005)

#define TORC_BLEND_OP_MASK							UINT64_C(0x0000000000000007)

// blend alpha-to-coverage
#define TORC_STATE_ALPHA_TO_COVERAGE_ENABLE			UINT64_C(0x0000000004000000)
#define TORC_STATE_ALPHA_TO_COVERAGE_DISABLE		UINT64_C(0x0000000000000000)
#define TORC_STATE_ALPHA_TO_COVERAGE_MASK			UINT64_C(0x0000000004000000)
#define TORC_STATE_ALPHA_TO_COVERAGE_SHIFT			26

// blend color write options
#define TORC_COLOR_WRITE_RED						UINT64_C(0x0000000010000000)
#define TORC_COLOR_WRITE_GREEN						UINT64_C(0x0000000020000000)
#define TORC_COLOR_WRITE_BLUE						UINT64_C(0x0000000040000000)
#define TORC_COLOR_WRITE_ALPHA						UINT64_C(0x0000000080000000)
#define TORC_COLOR_WRITE_ALL						UINT64_C(0x00000000f0000000)

#define TORC_BLEND_COLOR_WRITE_MASK					UINT64_C(0x00000000f0000000)
#define TORC_BLEND_COLOR_SHIFT						28

// independent blend option
#define TORC_STATE_INDEPENDENT_BLEND_ENABLE			UINT64_C(0x0000000100000000)
#define TORC_STATE_INDEPENDENT_BLEND_DISABLE		UINT64_C(0x0000000000000000)
#define TORC_STATE_INDEPENDENT_BLEND_MASK			UINT64_C(0x0000000100000000)
#define TORC_STATE_INDEPENDENT_BLEND_SHIFT			32


// Rasterizer state fields
// fill modes
#define TORC_STATE_FILL_WIREFRAME					UINT64_C(0x0000000200000000)
#define TORC_STATE_FILL_SOLID						UINT64_C(0x0000000000000000)
#define TORC_STATE_FILL_MASK						UINT64_C(0x000000020000000)
#define TORC_STATE_FILL_SHIFT						32

// cull modes
#define TORC_STATE_CULL_NONE						UINT64_C(0x0000000400000000)
#define TORC_STATE_CULL_FRONT						UINT64_C(0x0000000800000000)
#define TORC_STATE_CULL_BACK						UINT64_C(0x0000000000000000)
#define TORC_STATE_CULL_MASK						UINT64_C(0x0000000C00000000)
#define TORC_STATE_CULL_SHIFT						32


// cull direction
#define TORC_STATE_FRONT_CCW						UINT64_C(0x0000000000000000)
#define TORC_STATE_FRONT_CW							UINT64_C(0x0000001000000000)
#define TORC_STATE_FRONT_CULL_MASK					UINT64_C(0x0000001000000000)
#define TORC_STATE_FRONT_CULL_SHIFT					36

// depth clip setting
#define TORC_STATE_DEPTH_CLIP_ENABLE				UINT64_C(0x0000002000000000)
#define TORC_STATE_DEPTH_CLIP_DISABLE				UINT64_C(0x0000000000000000)
#define TORC_STATE_DEPTH_CLIP_MASK					UINT64_C(0x0000002000000000)
#define TORC_STATE_DEPTH_CLIP_SHIFT					36

// scissor 
#define TORC_STATE_SCISSOR_ENABLE					UINT64_C(0x0000004000000000)
#define TORC_STATE_SCISSOR_DISABLE					UINT64_C(0x0000000000000000)
#define TORC_STATE_SCISSOR_MASK						UINT64_C(0x0000004000000000)
#define TORC_STATE_SCISSOR_SHIFT					36


// msaa 
#define TORC_STATE_MSAA_ENABLE						UINT64_C(0x0000008000000000)
#define TORC_STATE_MSAA_DISABLE						UINT64_C(0x0000000000000000)
#define TORC_STATE_MSAA_MASK						UINT64_C(0x0000008000000000)
#define TORC_STATE_MSAA_SHIFT						36

// aa
#define TORC_STATE_AA_LINE_ENABLE					UINT64_C(0x0000010000000000)
#define TORC_STATE_AA_LINE_DISABLE					UINT64_C(0x0000000000000000)
#define TORC_STATE_AA_LINE_MASK						UINT64_C(0x0000010000000000)
#define TORC_STATE_AA_LINE_SHIFT					40

//depth comp functions
// 3 bits for depth comparison functions 
/* ***0 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000*/
#define TORC_STATE_COMPARISON_NEVER					UINT64_C(0x00000E0000000000)
#define TORC_STATE_COMPARISON_LESS					UINT64_C(0x0000020000000000)
#define TORC_STATE_COMPARISON_EQUAL					UINT64_C(0x0000040000000000)
#define TORC_STATE_COMPARISON_LESS_EQUAL			UINT64_C(0x0000060000000000)
#define TORC_STATE_COMPARISON_GREATER				UINT64_C(0x0000080000000000)
#define TORC_STATE_COMPARISON_NOT_EQUAL				UINT64_C(0x00000A0000000000)
#define TORC_STATE_COMPARISON_GREATER_EQUAL			UINT64_C(0x00000C0000000000)
#define TORC_STATE_COMPARISON_ALWAYS				UINT64_C(0x0000000000000000)
#define TORC_STATE_COMPARISON_MASK					UINT64_C(0x00000E0000000000)
#define TORC_STATE_COMPARISON_SHIFT					40

//depth write mask
/* 000* 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000*/
#define TORC_STATE_DEPTH_WRITE_MASK_ZERO			UINT64_C(0x0000100000000000)
#define TORC_STATE_DEPTH_WRITE_MASK_ALL				UINT64_C(0x0000000000000000)
#define TORC_STATE_DEPTH_WRITE_MASK					UINT64_C(0x0000100000000000)
#define TORC_STATE_DEPTH_WRITE_SHIFT				44

// stencil enable
/* 00*0 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000*/
#define TORC_STATE_STENCIL_ENABLE					UINT64_C(0x0000200000000000)
#define TORC_STATE_STENCIL_DISABLE					UINT64_C(0x0000000000000000)
#define TORC_STATE_STENCIL_STATUS_MASK				UINT64_C(0x0000200000000000)
#define TORC_STATE_STENCIL_STATUS_SHIFT				44

// depth enable
/* 0*00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000*/
#define TORC_STATE_DEPTH_ENABLE						UINT64_C(0x0000400000000000)
#define TORC_STATE_DEPTH_DISABLE					UINT64_C(0x0000000000000000)
#define TORC_STATE_DEPTH_STATUS_MASK				UINT64_C(0x0000400000000000)
#define TORC_STATE_DEPTH_STATUS_SHIFT				44

#define TORC_STATE_BLEND_ENABLE						UINT64_C(0x0000800000000000)
#define TORC_STATE_BLEND_DISABLE					UINT64_C(0x0000000000000000)
#define TORC_STATE_BLEND_STATUS_MASK				UINT64_C(0x0000800000000000)
#define TORC_STATE_BLEND_STATUS_SHIFT				44


// define stencil setting here


#define TORC_STATE_BLEND_STATE_DESC_MASK			UINT64_C(0x00000001FFFFFFFF)
#define TORC_STATE_RASTERIZER_STATE_DESC_MASK		UINT64_C(0x000001FE00000000)
#define TORC_STATE_DEPTH_DESC_MASK					UINT64_C(0x00007E0000000000)

#define TORC_STATE_DISCARD_ALL						UINT64_C(0x8000000000000000)
// 

#define TORC_BLEND_STATE(src,srcA,dst,dstA)			((uint64_t)src | (uint64_t)dst << 5) | (((uint64_t)srcA | (uint64_t)dstA << 5) << 13)
#define TORC_BLEND_EQUATION(rgbEq, alphaEq)			(((uint64_t)rgbEq << 10) | ((uint64_t)alphaEq << 23))

#define TORC_STATE_GET_BLEND_SRC(state) ((uint64_t)state & TORC_STATE_BLEND_SRC_MASK)
#define TORC_STATE_GET_BLEND_DST(state)	((uint64_t)state & TORC_STATE_BLEND_DST_MASK)
#define TORC_STATE_GET_BLEND_OP(state)	((uint64_t)state & TORC_STATE_BLEND_OP_MASK)

#define TORC_STATE_GET_BLEND_SRCA(state) ((uint64_t)state & TORC_STATE_BLEND_SRCA_MASK)
#define TORC_STATE_GET_BLEND_DSTA(state) ((uint64_t)state & TORC_STATE_BLEND_DSTA_MASK)
#define TORC_STATE_GET_BLEND_OP_ALPHA(state)  ((uint64_t)state & TORC_STATE_BLEND_DSTA_MASK)

#define TORC_STATE_GET_RT_WRITE_MASK(state) ((uint64_t)state & TORC_BLEND_COLOR_WRITE_MASK)
#define TORC_STATE_GET_CULL_MODE(state)	((uint64_t)state & TORC_STATE_CULL_MASK)
#define TORC_STATE_GET_FILL_MODE(state) ((uint64_t)state & TORC_STATE_FILL_MASK)
#define TORC_STATE_GET_FRONT_CULL_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_FRONT_CULL_MASK) >> TORC_STATE_FRONT_CULL_SHIFT)
#define TORC_STATE_GET_DEPTH_CLIP_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_DEPTH_CLIP_MASK) >> TORC_STATE_DEPTH_CLIP_SHIFT)
#define TORC_STATE_GET_SCISSOR_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_SCISSOR_MASK) >> TORC_STATE_SCISSOR_SHIFT)
#define TORC_STATE_GET_MSAA_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_MSAA_MASK) >> TORC_STATE_MSAA_SHIFT)
#define TORC_STATE_GET_AA_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_AA_LINE_MASK) >> TORC_STATE_AA_LINE_SHIFT)
#define TORC_STATE_GET_DEPTH_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_DEPTH_STATUS_MASK) >> TORC_STATE_DEPTH_STATUS_SHIFT)
#define TORC_STATE_GET_DEPTH_WRITE_MASK(state) ((uint64_t)state & TORC_STATE_DEPTH_WRITE_MASK)
#define TORC_STATE_GET_DEPTH_COMP_FUNC(state) ((uint64_t)state & TORC_STATE_COMPARISON_MASK)
#define TORC_STATE_GET_STENCIL_STATUS(state) (bool)(((uint64_t)state & TORC_STATE_STENCIL_STATUS_MASK) >> TORC_STATE_STENCIL_STATUS_SHIFT)

#define TORC_STATE_DEPTH_DEFAULT ((uint64_t)(TORC_STATE_DEPTH_ENABLE|TORC_STATE_DEPTH_WRITE_MASK_ALL | TORC_STATE_COMPARISON_LESS|TORC_STATE_STENCIL_DISABLE))
#define TORC_STATE_STENCIL_DESC(frontFace, backFace) (uint32_t)((uint32_t)frontFace | ((uint32_t)backFace << 16))

	typedef enum TORC_FORMAT
	{
		TORC_FORMAT_UNKNOWN = 0,
		TORC_FORMAT_R32G32B32A32_TYPELESS = 1,
		TORC_FORMAT_R32G32B32A32_FLOAT = 2,
		TORC_FORMAT_R32G32B32A32_UINT = 3,
		TORC_FORMAT_R32G32B32A32_SINT = 4,
		TORC_FORMAT_R32G32B32_TYPELESS = 5,
		TORC_FORMAT_R32G32B32_FLOAT = 6,
		TORC_FORMAT_R32G32B32_UINT = 7,
		TORC_FORMAT_R32G32B32_SINT = 8,
		TORC_FORMAT_R16G16B16A16_TYPELESS = 9,
		TORC_FORMAT_R16G16B16A16_FLOAT = 10,
		TORC_FORMAT_R16G16B16A16_UNORM = 11,
		TORC_FORMAT_R16G16B16A16_UINT = 12,
		TORC_FORMAT_R16G16B16A16_SNORM = 13,
		TORC_FORMAT_R16G16B16A16_SINT = 14,
		TORC_FORMAT_R32G32_TYPELESS = 15,
		TORC_FORMAT_R32G32_FLOAT = 16,
		TORC_FORMAT_R32G32_UINT = 17,
		TORC_FORMAT_R32G32_SINT = 18,
		TORC_FORMAT_R32G8X24_TYPELESS = 19,
		TORC_FORMAT_D32_FLOAT_S8X24_UINT = 20,
		TORC_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
		TORC_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
		TORC_FORMAT_R10G10B10A2_TYPELESS = 23,
		TORC_FORMAT_R10G10B10A2_UNORM = 24,
		TORC_FORMAT_R10G10B10A2_UINT = 25,
		TORC_FORMAT_R11G11B10_FLOAT = 26,
		TORC_FORMAT_R8G8B8A8_TYPELESS = 27,
		TORC_FORMAT_R8G8B8A8_UNORM = 28,
		TORC_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
		TORC_FORMAT_R8G8B8A8_UINT = 30,
		TORC_FORMAT_R8G8B8A8_SNORM = 31,
		TORC_FORMAT_R8G8B8A8_SINT = 32,
		TORC_FORMAT_R16G16_TYPELESS = 33,
		TORC_FORMAT_R16G16_FLOAT = 34,
		TORC_FORMAT_R16G16_UNORM = 35,
		TORC_FORMAT_R16G16_UINT = 36,
		TORC_FORMAT_R16G16_SNORM = 37,
		TORC_FORMAT_R16G16_SINT = 38,
		TORC_FORMAT_R32_TYPELESS = 39,
		TORC_FORMAT_D32_FLOAT = 40,
		TORC_FORMAT_R32_FLOAT = 41,
		TORC_FORMAT_R32_UINT = 42,
		TORC_FORMAT_R32_SINT = 43,
		TORC_FORMAT_R24G8_TYPELESS = 44,
		TORC_FORMAT_D24_UNORM_S8_UINT = 45,
		TORC_FORMAT_R24_UNORM_X8_TYPELESS = 46,
		TORC_FORMAT_X24_TYPELESS_G8_UINT = 47,
		TORC_FORMAT_R8G8_TYPELESS = 48,
		TORC_FORMAT_R8G8_UNORM = 49,
		TORC_FORMAT_R8G8_UINT = 50,
		TORC_FORMAT_R8G8_SNORM = 51,
		TORC_FORMAT_R8G8_SINT = 52,
		TORC_FORMAT_R16_TYPELESS = 53,
		TORC_FORMAT_R16_FLOAT = 54,
		TORC_FORMAT_D16_UNORM = 55,
		TORC_FORMAT_R16_UNORM = 56,
		TORC_FORMAT_R16_UINT = 57,
		TORC_FORMAT_R16_SNORM = 58,
		TORC_FORMAT_R16_SINT = 59,
		TORC_FORMAT_R8_TYPELESS = 60,
		TORC_FORMAT_R8_UNORM = 61,
		TORC_FORMAT_R8_UINT = 62,
		TORC_FORMAT_R8_SNORM = 63,
		TORC_FORMAT_R8_SINT = 64,
		TORC_FORMAT_A8_UNORM = 65,
		TORC_FORMAT_R1_UNORM = 66,
		TORC_FORMAT_R9G9B9E5_SHAREDEXP = 67,
		TORC_FORMAT_R8G8_B8G8_UNORM = 68,
		TORC_FORMAT_G8R8_G8B8_UNORM = 69,
		TORC_FORMAT_BC1_TYPELESS = 70,
		TORC_FORMAT_BC1_UNORM = 71,
		TORC_FORMAT_BC1_UNORM_SRGB = 72,
		TORC_FORMAT_BC2_TYPELESS = 73,
		TORC_FORMAT_BC2_UNORM = 74,
		TORC_FORMAT_BC2_UNORM_SRGB = 75,
		TORC_FORMAT_BC3_TYPELESS = 76,
		TORC_FORMAT_BC3_UNORM = 77,
		TORC_FORMAT_BC3_UNORM_SRGB = 78,
		TORC_FORMAT_BC4_TYPELESS = 79,
		TORC_FORMAT_BC4_UNORM = 80,
		TORC_FORMAT_BC4_SNORM = 81,
		TORC_FORMAT_BC5_TYPELESS = 82,
		TORC_FORMAT_BC5_UNORM = 83,
		TORC_FORMAT_BC5_SNORM = 84,
		TORC_FORMAT_B5G6R5_UNORM = 85,
		TORC_FORMAT_B5G5R5A1_UNORM = 86,
		TORC_FORMAT_B8G8R8A8_UNORM = 87,
		TORC_FORMAT_B8G8R8X8_UNORM = 88,
		TORC_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
		TORC_FORMAT_B8G8R8A8_TYPELESS = 90,
		TORC_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
		TORC_FORMAT_B8G8R8X8_TYPELESS = 92,
		TORC_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
		TORC_FORMAT_BC6H_TYPELESS = 94,
		TORC_FORMAT_BC6H_UF16 = 95,
		TORC_FORMAT_BC6H_SF16 = 96,
		TORC_FORMAT_BC7_TYPELESS = 97,
		TORC_FORMAT_BC7_UNORM = 98,
		TORC_FORMAT_BC7_UNORM_SRGB = 99,
		TORC_FORMAT_AYUV = 100,
		TORC_FORMAT_Y410 = 101,
		TORC_FORMAT_Y416 = 102,
		TORC_FORMAT_NV12 = 103,
		TORC_FORMAT_P010 = 104,
		TORC_FORMAT_P016 = 105,
		TORC_FORMAT_420_OPAQUE = 106,
		TORC_FORMAT_YUY2 = 107,
		TORC_FORMAT_Y210 = 108,
		TORC_FORMAT_Y216 = 109,
		TORC_FORMAT_NV11 = 110,
		TORC_FORMAT_AI44 = 111,
		TORC_FORMAT_IA44 = 112,
		TORC_FORMAT_P8 = 113,
		TORC_FORMAT_A8P8 = 114,
		TORC_FORMAT_B4G4R4A4_UNORM = 115,

		TORC_FORMAT_P208 = 130,
		TORC_FORMAT_V208 = 131,
		TORC_FORMAT_V408 = 132,


		TORC_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189,
		TORC_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190,


		TORC_FORMAT_FORCE_UINT = 0xffffffff
	} TORC_FORMAT;
	typedef enum TORC_FILTER
	{
		TORC_FILTER_MIN_MAG_MIP_POINT = 0,
		TORC_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
		TORC_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
		TORC_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
		TORC_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
		TORC_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
		TORC_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
		TORC_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
		TORC_FILTER_ANISOTROPIC = 0x55,
		TORC_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
		TORC_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
		TORC_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
		TORC_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
		TORC_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
		TORC_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
		TORC_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
		TORC_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
		TORC_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
		TORC_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
		TORC_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
		TORC_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
		TORC_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
		TORC_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
		TORC_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
		TORC_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
		TORC_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
		TORC_FILTER_MINIMUM_ANISOTROPIC = 0x155,
		TORC_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
		TORC_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
		TORC_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
		TORC_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
		TORC_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
		TORC_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
		TORC_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
		TORC_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
		TORC_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
	} 	TORC_FILTER;

	typedef enum TORC_USAGE
	{
		TORC_USAGE_DEFAULT = 0,
		TORC_USAGE_IMMUTABLE = 1,
		TORC_USAGE_DYNAMIC = 2,
		TORC_USAGE_STAGING = 3
	}TORC_USAGE;
	typedef struct TORC_SAMPLE_DESC
	{
		uint32_t count;
		uint32_t quality;
	}TORC_SAMPLE_DESC;
	typedef struct TORC_TEXTURE2D_DESC
	{
		uint32_t width;
		uint32_t height;
		uint32_t mipLevels;
		uint32_t arraySize; // in case it is a texture array
		TORC_FORMAT format;
		TORC_SAMPLE_DESC sampleDesc;
		TORC_USAGE usage;
		uint32_t bindFlags;
		uint32_t cpuAccessFlags;
		uint32_t miscFlags;
	} TORC_TEXTURE2D_DESC;


	typedef enum TORC_TEXTURE_ADDRESS_MODE
	{
		TORC_TEXTURE_ADDRESS_WRAP = 1,
		TORC_TEXTURE_ADDRESS_MIRROR = 2,
		TORC_TEXTURE_ADDRESS_CLAMP = 3,
		TORC_TEXTURE_ADDRESS_BORDER = 4,
		TORC_TEXTURE_ADDRESS_MIRROR_ONCE = 5
	} 	TORC_TEXTURE_ADDRESS_MODE;

	typedef	enum TORC_COMPARISON_FUNC
	{
		TORC_COMPARISON_NEVER = 1,
		TORC_COMPARISON_LESS = 2,
		TORC_COMPARISON_EQUAL = 3,
		TORC_COMPARISON_LESS_EQUAL = 4,
		TORC_COMPARISON_GREATER = 5,
		TORC_COMPARISON_NOT_EQUAL = 6,
		TORC_COMPARISON_GREATER_EQUAL = 7,
		TORC_COMPARISON_ALWAYS = 8
	} 	TORC_COMPARISON_FUNC;

	typedef struct TORC_SAMPLER_DESC
	{
		TORC_FILTER Filter;
		TORC_TEXTURE_ADDRESS_MODE AddressU;
		TORC_TEXTURE_ADDRESS_MODE AddressV;
		TORC_TEXTURE_ADDRESS_MODE AddressW;
		float MipLODBias;
		uint32_t MaxAnisotropy;
		TORC_COMPARISON_FUNC ComparisonFunc;
		float BorderColor[4];
		float MinLOD;
		float MaxLOD;
	} 	TORC_SAMPLER_DESC;